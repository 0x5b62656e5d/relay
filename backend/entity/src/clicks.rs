//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "clicks")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub url_id: String,
    pub clicked_at: DateTime,
    pub ip_address: Option<String>,
    pub user_agent: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::urls::Entity",
        from = "Column::UrlId",
        to = "super::urls::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Urls,
}

impl Related<super::urls::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Urls.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
